@using MudBlazor
@inject Session _session
@inject UICommandRunner _commandRunner
@inject ILogger<PostItemView> _log

@{
    _log.LogInformation("Rendering, Item = {Item}", Value);
}

<div style="display: flex; margin: 20px">

    <MudTextField TextChanged="BlazorEventHelper.NonRendering<string>(UpdateTitle)" ChangeTextOnKeyPress="false" Value="@Value.Title" Variant="Variant.Outlined" Margin="Margin.Dense"/>

    @if (Value.Image is not null)
    {
        <MudImage Style="width: 64px" Fluid Src="@Value.Image"></MudImage>
    }


    <MudButton OnClick="Remove" Color="MudBlazor.Color.Error">
        Remove
    </MudButton>

</div>

@code {
    [Parameter, ParameterComparer(typeof(ByReferenceParameterComparer))]
    public Post Value { get; set; } = null!;

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;



    private Task UpdateTitle(string title)
    {
        title = title.Trim();
        if (Value.Title == title)
            return Task.CompletedTask;
        var post = Value with { Title = title };
        return _commandRunner.Run(new AddOrUpdatePostCommand(_session, post));
    }

    private Task Remove()
        => _commandRunner.Run(new RemovePostCommand(_session, Value.Slug));
}
