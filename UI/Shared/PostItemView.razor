@using Margin = Blazorise.Margin
@using Color = Blazorise.Color
@inject Session _session
@inject UICommandRunner _commandRunner
@inject ILogger<PostItemView> _log

@{
    _log.LogInformation("Rendering, Item = {Item}", Value);
}

<Addons Margin="Margin.Is3.OnY">

    <TextEdit TextChanged="BlazorEventHelper.NonRendering<string>(UpdateTitle)"
              ChangeTextOnKeyPress="false"
              Text="@Value.Title" />

    @if (Value.Image is not null)
    {
        <Image Style="width: 64px" Fluid  Source="@Value.Image"></Image>
    }

    <Addon AddonType="AddonType.End">
        <Button Clicked="Remove" Color="Color.Warning">
            <Blazorise.Icon Name="FontAwesomeIcons.Minus" />
        </Button>
    </Addon>
</Addons>

@code {
    [Parameter, ParameterComparer(typeof(ByReferenceParameterComparer))]
    public Post Value { get; set; } = null!;

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;



    private Task UpdateTitle(string title)
    {
        title = title.Trim();
        if (Value.Title == title)
            return Task.CompletedTask;
        var post = Value with { Title = title };
        return _commandRunner.Run(new AddOrUpdatePostCommand(_session, post));
    }

    private Task Remove()
        => _commandRunner.Run(new RemovePostCommand(_session, Value.Slug));
}
