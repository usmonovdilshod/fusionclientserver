@page "/todo"
@using MudBlazor
@inherits ComputedStateComponent<Post[]>
@inject IPostService Posts
@inject Session Session
@inject UICommandRunner CommandRunner
@inject ILogger<TodoPage> Log

@{
    Log.LogInformation("Rendering, State.Computed.Version = {Version}", State.Computed.Version);
    var error = State.Error;
    var posts = State.ValueOrDefault ?? Array.Empty<Post>(); // ValueOrDefault returns default if there is an Error
}

<h1>Todo List</h1>

<StateOfStateBadge State="@State"/>
<div>
    Updated:
    <b>
        <MomentsAgoBadge Value="LastStateUpdateTime"/>
    </b>
</div>
<MudButtonGroup >
    Call:
    <MudButton Color="MudBlazor.Color.Error" Size="MudBlazor.Size.Small" Clicked="_ => StateHasChanged()">StateHasChanged()</MudButton>
    <MudButton Color="MudBlazor.Color.Error" Size="MudBlazor.Size.Small" Clicked="_ => State.Invalidate()">State.Invalidate()</MudButton>
    <MudButton Color="MudBlazor.Color.Error" Size="MudBlazor.Size.Small" Clicked="_ => State.Recompute()">State.Recompute()</MudButton>
</MudButtonGroup >

<AuthorizeView>
    <NotAuthorized>
        <SignInDropdown Why="to use this page"/>
    </NotAuthorized>
    <Authorized>
        <WhenException Exception="error"/>
        <MudGrid >
            <MudItem >
                <MudText>
                    <PostCountBadge/>
                </MudText>

                @foreach (var post in posts)
                {
                    <PostItemView @key="@post.Slug" Value="@post"/>
                }

                @if (HasMore)
                {
                    <MudButton Clicked="_ => LoadMore()" Color="MudBlazor.Color.Primary"  >
                        Load @PageSize more 
                    </MudButton>
                }

            
                    <div style="display: flex">
                       
                            <MudButton OnClick="Create" Color="MudBlazor.Color.Primary"  >
                                Send
                            </MudButton>
                        
                        <input @bind="NewPostTitle"  class="form-control"/>
                        <TusUploader @bind-Link="ImageUrl" ></TusUploader>
                        
                    </div>
          
            </MudItem>
        </MudGrid >
    </Authorized>
</AuthorizeView>

@code {
    private int PageSize { get; set; } = 5;
    private bool HasMore { get; set; }
    private string NewPostTitle { get; set; } = "";
    private string ImageUrl { get; set; }
    private IBrowserFile file = null;
    private DateTime LastStateUpdateTime { get; set; } = DateTime.UtcNow;
    
    

    // AuthState property below seemingly does nothing, right?
    // But try to comment out this line & sign-in + sign-out.
    // See the error badge stays there for a while now?
    // Check your explanation on our Discord: https://discord.gg/EKEwv6d
    [CascadingParameter]
    protected Task<AuthState> AuthState { get; set; } = null!;

    protected override async Task<Post[]> ComputeState(CancellationToken cancellationToken)
    {
        var items = await Posts.List(Session, PageSize + 1, cancellationToken);
        HasMore = items.Length > PageSize;
        if (HasMore)
            items = items[0..PageSize];
        LastStateUpdateTime = DateTime.UtcNow;
        return items;
    }

    private void LoadMore()
    {
        PageSize *= 2;
        State.Recompute();
    }

    

    private void Create()
    {
        var post = new Post(NewPostTitle,DateTime.Now,"ASdasdasd",ImageUrl,null);
        CommandRunner.Run(new AddOrUpdatePostCommand(Session, post));
    } 

}