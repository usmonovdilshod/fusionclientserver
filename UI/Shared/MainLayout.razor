@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager Navigator
@inject UICommandFailureList CommandFailureList

@using FusionBlog.UI.Theme
@using MudBlazor
@using MudBlazor.ThemeManager

@{
    var failures = CommandFailureList.Items;
}

           @* @foreach (var failure in failures)
            {
                <WhenCommandError Exception="failure.Result?.Error"
                Dismissed="@(_ => CommandFailureList.Remove(failure.CommandId))" />
            }

            <AuthorizeView>
                <Authorized>
                    <p style="color: black;">***I can not see this text either...***</p>
                </Authorized>
                <NotAuthorized>
                    Not auth
                </NotAuthorized>
            </AuthorizeView>*@





<MudThemeProvider Theme="_themeManager.Theme" />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>

    <MudAppBar Elevation="4">
        <MudHidden Breakpoint="MudBlazor.Breakpoint.SmAndDown">
            <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Size="MudBlazor.Size.Large" />
        </MudHidden>
        <MudHidden Breakpoint="MudBlazor.Breakpoint.MdAndUp">
            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="MudBlazor.Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        </MudHidden>
        <MudHidden Breakpoint="MudBlazor.Breakpoint.Xs">
            <MudText Typo="Typo.h6" Class="ml-4">Admin Dashboard</MudText>
        </MudHidden>
        <MudHidden Breakpoint="MudBlazor.Breakpoint.Xs" Invert="true">
            <MudText Typo="Typo.subtitle2">Admin Dashboard</MudText>
        </MudHidden>
        <MudSpacer />
        <MudMenu Direction="MudBlazor.Direction.Left" OffsetX="true" Dense="true" Class="mt-1 ml-4">
            <ActivatorContent>
                <MudAvatar Image="https://media-exp1.licdn.com/dms/image/C4D03AQGNO7uV7fRi7Q/profile-displayphoto-shrink_200_200/0/1531753989819?e=1614816000&v=beta&t=t2IEQlTyem3aFB1sQXFHrDGt0yMsNkPu7jDmMPoEbLg" />
            </ActivatorContent>
            <ChildContent>
                @*<PersonCard Class="mt-n2" />*@
                <MudDivider Class="mb-2" />
                <MudListItem Text="Account" Icon="@Icons.Material.Outlined.Person" Href="/personal/account" />
                <MudListItem Text="Logout" Icon="@Icons.Material.Outlined.Login" Href="/pages/authentication/login" />
            </ChildContent>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="25" ClipMode="_themeManager.DrawerClipMode">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudHidden Breakpoint="MudBlazor.Breakpoint.SmAndDown">
            <MudToolBar DisableGutters="true">
                <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="MudBlazor.Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
                <MudSpacer />
            </MudToolBar>
        </MudHidden>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">

         <RuntimeHeader />

            @Body

        </MudContainer>
    </MudMainContent>
</MudLayout>
@*
<MudThemeManagerButton  OnClick="@((e) => OpenThemeManager(true))"/>
<MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />*@


@code {
    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();

    public bool _drawerOpen = true;
    public bool _themeManagerOpen = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _themeManager.Theme = new MudBlazorAdminDashboard();
        _themeManager.DrawerClipMode = DrawerClipMode.Always;
        _themeManager.FontFamily = "Montserrat";
        _themeManager.DefaultBorderRadius = 3;

        Navigator.LocationChanged += OnLocationChanged;
        CommandFailureList.Changed += OnCommandFailureListChanged;
    }


    public void Dispose()
    {
        Navigator.LocationChanged -= OnLocationChanged;
        CommandFailureList.Changed -= OnCommandFailureListChanged;
    }

     private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    => CommandFailureList.Clear();

    private void OnCommandFailureListChanged()
    => this.StateHasChangedAsync();
}

