@using MudBlazor
@using Stl.OS
@using System.Web
@using System.Reflection
@inject BlazorModeHelper _blazorModeHelper
@inject IJSRuntime _js
@implements IDisposable


<MudMenu Label="@(_isPrerendering ? "Loading..." : GetModeName(_isServerSideBlazor))">
    @foreach (var mode in new[] { true, false })
    {
        <MudMenuItem OnClick="@(() => _blazorModeHelper.ChangeMode(mode))">@GetModeName(mode)>Enlist</MudMenuItem>
    }
</MudMenu>

@code {
    private bool _isPrerendering;
    private bool _isServerSideBlazor = BlazorModeHelper.IsServerSideBlazor;

    [Parameter]
    public string CssClass { get; set; } = "";

    protected override void OnInitialized()
    {
        var jsRuntimeType = _js.GetType();
        if (jsRuntimeType.Name != "RemoteJSRuntime")
        {
            _isPrerendering = false;
            return;
        }
        var fClientProxy = jsRuntimeType.GetField("_clientProxy", BindingFlags.Instance | BindingFlags.NonPublic);
        var clientProxy = fClientProxy?.GetValue(_js);
        _isPrerendering = fClientProxy != null && clientProxy == null;
    }

    private DotNetObjectReference<BarBlazorMode> objRef;


    private string GetModeName(bool isServerSideBlazor)
        => isServerSideBlazor ? "Blazor Server" : "Blazor WASM";


    public void Dispose()
    {
        objRef?.Dispose();
    }

}